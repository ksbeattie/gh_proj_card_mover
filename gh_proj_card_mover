#!/usr/bin/env python3

'''A script for moving a set of project cards from one project board to another project board.

'''

import argparse
import logging
import os
import pprint
import sys
import urllib

import requests

# Constants & globals
__author__ = 'Keith Beattie <KSBeattie@lbl.gov>'
__version__ = '0.1'

# Base URL for GitHub API
GH_API_URL = 'https://api.github.com/'

# Special header needed while project API is still in 'developer preview'
GH_DEV_PREVIEW_ACCEPT = 'application/vnd.github.inertia-preview+json'


class GHProjCardMoverError(Exception):
    ''' App specific exception '''
    pass


class GHProjCardMover:
    ''' Application class '''

    def __init__(self, log, args):
        self.log = log
        self.log.debug('args: %s', args)

        # Instance vars
        self.args = args
        self.sess = None  # request session object
        self.user = None  # The authenticated user info dictionary
        self.src_proj = {
            'proj'    : None,  # The project dict from GH
            'columns' : [],    # The columns
            }
        self.dest_proj = {
            'proj'    : None,  # The project dict from GH
            'columns' : [],    # The columns
            }


    def setup(self):
        ''' Set up sessin, try to get user info as a test of connection, auth, etc.'''

        self.sess = requests.Session()
        self.sess.headers['Authorization'] = 'token {}'.format(self.args.token)
        self.sess.headers['Accept'] = GH_DEV_PREVIEW_ACCEPT

        self.log.trace('headers: %s', self.sess.headers)

        # Now try it out
        res = self.sess.get(GH_API_URL + 'user')
        self.user = res.json()
        if res.ok:
            self.log.info('Connected as user: %s', self.user['login'])
        else:
            raise GHProjCardMoverError(
                'Unable to initiate session: {}'.format(self.user['message']))


    def shutdown(self):
        '''Thats a wrap'''

        if self.sess:
            self.log.trace('closing session')
            self.sess.close()


    def gh_get(self, api, full_url=True, soft_fail=False):

        '''Make a GH API get call, return if responce was ok and object built from json.  Unless
           soft_fail is true, raise exception if response is not ok.
        '''

        api_url = api if full_url else GH_API_URL + api
        self.log.debug('Calling: %s', api_url)
        res = self.sess.get(api_url)
        res_obj = res.json()
        if not soft_fail and not res.ok:
            raise GHProjCardMoverError('Failure making call {}, response: {}'.format(api, res_obj))

        return res.ok, res_obj



    def get_project_from_url(self, url):
        ''' Get project info from the given url of the project '''

        self.log.debug('Looking at project: %s', url)

        # Split up the url
        par_res = urllib.parse.urlparse(url)
        _, ou_name, repo, proj, _ = par_res.path.split('/')

        if proj != 'projects':
            raise GHProjCardMoverError('URL does not look like a project: ' + url)

        # Look for projects, using repo API since it seems that org-level projects show up here
        # too.
        proj_api = os.path.join('repos', ou_name, repo, proj)
        _, proj_list = self.gh_get(proj_api, full_url=False)

        for proj in proj_list:
            if proj.get('html_url', '') == url:
                if self.log.level <= logging.TRACE:
                    self.log.trace('found project: %s', pprint.pformat(proj))
                return proj

        raise GHProjCardMoverError('Could not find project for url: ' + url)



    def run(self):
        ''' Get this show on the road... '''

        self.log.info('Application entry.')

        self.setup()

        # Get source and dest project details for src and dest project board urls as given
        self.src_proj['proj'] = self.get_project_from_url(self.args.src)
        self.log.info('Found source project "%s" with id: %d',
                      self.src_proj['proj']['name'], self.src_proj['proj']['id'])

        self.dest_proj['proj'] = self.get_project_from_url(self.args.dest)
        self.log.info('Found destination project "%s" with id: %d',
                      self.dest_proj['proj']['name'], self.dest_proj['proj']['id'])

        # Get column info for source and dest project boards
        self.src_proj['columns']  = self.gh_get(self.src_proj['proj']['columns_url'])
        self.log.info('Found %d columns for "%s"', len(self.src_proj['columns']),
                      self.src_proj['proj']['name'])

        self.dest_proj['columns'] = self.gh_get(self.dest_proj['proj']['columns_url'])
        self.log.info('Found %d columns for "%s"', len(self.dest_proj['columns']),
                      self.dest_proj['proj']['name'])

        self.log.trace(pprint.pformat(self.src_proj))
        self.log.trace(pprint.pformat(self.dest_proj))

        # For each column of the From board:
        #   - Get list of cards, and their corresponding issues/PRs, from first column of the From
        #     board
        #   - For each (unclosed) card:

        #       Create a new card with the same issue/PR on the correspondingly named column of the
        #       To board


        # Possible command line args to add:
        # - Move closed cards as well as open ones (default False)
        # - Only move between columns with identical names (default true) If False, use column
        #   position order: left to right.


        self.log.info('Application end.')
        self.shutdown()


def main():
    ''' Parse args, initialize and start application '''

    arg_parser = argparse.ArgumentParser(
        description='Move a set of cards from one github project board to another project board',
        epilog='Version: ' + __version__)
    arg_parser.add_argument('-v', '--verbose', action='count', default=0,
                            help='increase output verbosity')
    arg_parser.add_argument('-q', '--quiet', action='count', default=0,
                            help='decrease output verbosity')

    proj_grp = arg_parser.add_argument_group('GitHub project arguments')
    proj_grp.add_argument('--token', type=str, required=True,
                          help='The personal token for authenticating to GitHub')
    proj_grp.add_argument('--src', type=str, required=True,
                          help='(required) The url of the project to move cards FROM')
    proj_grp.add_argument('--dest', type=str, required=True,
                          help='(required) The url of the project to move cards TO')

    args = arg_parser.parse_args()

    # Get -q/-v counts and set log level within range
    llevel = args.verbose - args.quiet + 1

    # Add a TRACE to logging
    logging.TRACE = logging.NOTSET + 5
    logging.addLevelName(logging.TRACE, 'TRACE')

    # Map llevel to python's logger levels
    llmap = {
        -2: logging.CRITICAL,
        -1: logging.ERROR,
        0: logging.WARNING,
        1: logging.INFO,
        2: logging.DEBUG,
        3: logging.TRACE
    }

    # Keep log level within bounds
    llevel = min(max(llevel, min(llmap)), max(llmap))

    logging.basicConfig(stream=sys.stdout, level=llmap[llevel],
                        format='%(filename)20s: '
                               '[%(levelname)7s]: '
                               '%(funcName)s:'
                               '%(lineno)d: '
                               '%(message)s')

    log = logging.getLogger(__name__)

    # Add a trace method to the logger
    def _trace(message, *args, **kws):
        log.log(logging.TRACE, message, *args, **kws)
    log.trace = _trace

    ret = 0
    try:
        app = GHProjCardMover(log, args)
        app.run()
    except GHProjCardMoverError as gherr:
        ret = 1
        if llevel >= 2:
            log.exception(gherr)
        else:
            log.error(str(gherr))

    return ret


if __name__ == '__main__':
    sys.exit(main())
