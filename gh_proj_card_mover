#!/usr/bin/env python3

'''A script for moving a set of project cards from one project board to another project board.

'''

import argparse
import logging
import os
import pprint
import sys
import urllib

import requests

# Constants & globals
__author__ = 'Keith Beattie <KSBeattie@lbl.gov>'
__version__ = '0.1'


class GHProjCardMoverError(Exception):
    ''' General pupose, app-specific exception '''
    pass


class GHApi:
    ''' A class for making REST API calls to GitHub '''

    def __init__(self):
        self.log = logging.getLogger(__name__)
        self.sess = None  # The request session object
        self.user = None  # The authenticated user info dictionary
        self.gh_api_base = 'https://api.github.com/'


    def setup(self, token):
        ''' Set up session, try to get user info as a test of connection, auth, etc. '''
        self.sess = requests.Session()
        self.sess.headers['Authorization'] = 'token {}'.format(token)

        # Needed while project REST API is in "developer preview"
        self.sess.headers['Accept'] = 'application/vnd.github.inertia-preview+json'

        self.log.trace('headers: %s', self.sess.headers)

        # Now try it out
        res = self.sess.get(self.gh_api_base + 'user')
        self.user = res.json()
        if res.ok:
            self.log.info(self)
        else:
            raise GHProjCardMoverError(
                'Unable to initiate session: {}'.format(self.user['message']))


    def shutdown(self):
        ''' Close the underlying session object '''
        if self.sess:
            self.log.trace('closing session')
            self.sess.close()


    def get(self, api_path, full_url=True):
        '''Make a GH API get call returning an object built from json response.  If full_url is
        False, then the gh_api_base will be prepended to api. '''

        api_url = api_path if full_url else self.gh_api_base + api_path
        self.log.debug('Calling: %s', api_url)
        res = self.sess.get(api_url)
        res_obj = res.json()
        if not res.ok:
            raise GHProjCardMoverError('Failed API call to: {}, response: {}'.\
                                       format(api_path, res_obj))
        return res_obj


    def __str__(self):
        if self.sess:
            return 'Api: auth as {}'.format(self.user['login'])
        return 'Api: not yet setup'


class GHCol:
    ''' A class to represent a column on a project board and it's cards '''

    def __init__(self, api):
        self.log = logging.getLogger(__name__)
        self.api = api
        self.col = None  # The column dict from GH
        self.cards = []  # The list of cards for this column


    def setup(self, col):
        '''Set up with card info '''
        self.col = col
        self.cards = self.api.get(self.col['cards_url'])
        self.log.info(self)


    def __str__(self):
        if self.col:
            return 'Column: "{}" ({}) with {} cards'.\
                format(self.col['name'], self.col['id'], len(self.cards))
        return 'Column: not yet set up'


class GHProj:
    ''' A class to represent a project board and it's columns. '''

    def __init__(self, api):
        ''' Construct a new object from the given project html_url '''
        self.log = logging.getLogger(__name__)
        self.api = api
        self.proj = None  # The product dict from GH
        self.cols = []    # A list of GHCol objects


    def setup(self, html_url):
        ''' Set up with html url of project '''
        self.log.debug('Looking for project: %s', html_url)

        # Split up the html_url in prep for API call
        par_res = urllib.parse.urlparse(html_url)
        _, ou_name, repo, proj, _ = par_res.path.split('/')

        if proj != 'projects':
            raise GHProjCardMoverError('URL does not look like a project: ' + html_url)

        # Decide which api path to use, based on if this looks like an org-level
        # project or a repo-level project
        if ou_name == 'orgs':  # org-level project
            proj_api_path = os.path.join(ou_name, repo, proj)
        else: # assume repo-level project
            proj_api_path = os.path.join('repos', ou_name, repo, proj)

        proj_list = self.api.get(proj_api_path, full_url=False)

        # Find this project in the list of projects returned
        for proj in proj_list:
            if proj.get('html_url', '') == html_url:
                if self.log.level <= logging.TRACE:
                    self.log.trace('found project: %s', pprint.pformat(proj))
                self.proj = proj
                break

        if self.proj is None:
            raise GHProjCardMoverError('Could not find project for url: ' + html_url)
        else:
            self.log.info(self)

        # Populate columns
        for col in self.api.get(self.proj['columns_url']):
            self.cols.append(GHCol(self.api).setup(col))


    def __str__(self):
        if self.proj:
            return 'Project "{}" ({}) with {} columns'.\
                format(self.proj['name'], self.proj['id'], len(self.cols))
        return 'Project: not yet set up'



class GHProjCardMover:
    ''' Application class '''

    def __init__(self, args):
        self.log = logging.getLogger(__name__)
        self.log.debug('args: %s', args)

        # Instance vars
        self.args = args
        self.api = GHApi()  # The GHApi object for making GH REST API calls
        self.src_proj = GHProj(self.api)  # A GHProj for the source board
        self.dest_proj = GHProj(self.api) # A GHProj for the destination board


    def run(self):
        ''' Get this show on the road... '''

        self.log.info('Application entry.')

        # Initialize the API
        self.api.setup(self.args.token)

        # Get source project board
        self.src_proj.setup(self.args.src)
        self.log.info(self.src_proj)

        #for col in self.src_proj.cols:
        #    self.log.info('  Col: %s', col)

        # And the dest project board
        self.dest_proj.setup(self.args.dest)
        self.log.info(self.dest_proj)

        # For each column of the src board:
        #   - Get list of cards, and their corresponding issues/PRs, from first column of the From
        #     board
        #   - For each (unclosed) card:

        #       Create a new card with the same issue/PR on the correspondingly named column of the
        #       To board


        # Possible command line args to add:
        # - Move closed cards as well as open ones (default False)
        # - Only move between columns with identical names (default true) If False, use column
        #   position order: left to right.


        self.log.info('Application end.')
        self.api.shutdown()


def main():
    ''' Parse args, initialize and start application '''

    arg_parser = argparse.ArgumentParser(
        description='Move a set of cards from one github project board to another project board',
        epilog='Version: ' + __version__)
    arg_parser.add_argument('-v', '--verbose', action='count', default=0,
                            help='increase output verbosity')
    arg_parser.add_argument('-q', '--quiet', action='count', default=0,
                            help='decrease output verbosity')

    proj_grp = arg_parser.add_argument_group('GitHub project arguments')
    proj_grp.add_argument('--token', type=str, required=True,
                          help='The personal token for authenticating to GitHub')
    proj_grp.add_argument('--src', type=str, required=True,
                          help='(required) The url of the project to move cards FROM')
    proj_grp.add_argument('--dest', type=str, required=True,
                          help='(required) The url of the project to move cards TO')

    args = arg_parser.parse_args()

    # Get -q/-v counts and set log level within range
    llevel = args.verbose - args.quiet + 1

    # Add a TRACE to logging
    logging.TRACE = logging.NOTSET + 5
    logging.addLevelName(logging.TRACE, 'TRACE')
    setattr(logging, 'TRACE', logging.TRACE)

    # Map llevel to python's logger levels
    llmap = {
        -2: logging.CRITICAL,
        -1: logging.ERROR,
        0: logging.WARNING,
        1: logging.INFO,
        2: logging.DEBUG,
        3: logging.TRACE
    }

    # Keep log level within bounds
    llevel = min(max(llevel, min(llmap)), max(llmap))

    logging.basicConfig(stream=sys.stdout,
                        format='%(asctime)s: '
                               '%(levelname)-8s: '
                               '%(funcName)-10s:'
                               '%(lineno)4d: '
                               '%(message)s')

    log = logging.getLogger(__name__)
    log.setLevel(llmap[llevel])

    # Add a trace method to this logger
    def _trace(self, message, *args, **kws):
        if self.isEnabledFor(logging.TRACE):
            self._log(logging.TRACE, message, args, **kws) # pylint: disable=protected-access
    setattr(logging.getLoggerClass(), 'trace', _trace)

    ret = 0
    try:
        app = GHProjCardMover(args)
        app.run()
    except GHProjCardMoverError as gherr:
        ret = 1
        if llevel >= 2:
            log.exception(gherr)
        else:
            log.error(str(gherr))

    return ret


if __name__ == '__main__':
    sys.exit(main())
